// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPCDemoService.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace App.RPC.Service {
  public static class RPCDemoService
  {
    static readonly string __ServiceName = "App.RPC.Service.RPCDemoService";

    static readonly Marshaller<global::App.RPC.Service.DemoRequest> __Marshaller_DemoRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::App.RPC.Service.DemoRequest.Parser.ParseFrom);
    static readonly Marshaller<global::App.RPC.Model.Response> __Marshaller_Response = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::App.RPC.Model.Response.Parser.ParseFrom);
    static readonly Marshaller<global::App.RPC.Service.DemoId> __Marshaller_DemoId = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::App.RPC.Service.DemoId.Parser.ParseFrom);
    static readonly Marshaller<global::App.RPC.Service.Search> __Marshaller_Search = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::App.RPC.Service.Search.Parser.ParseFrom);
    static readonly Marshaller<global::App.RPC.Service.DemoList> __Marshaller_DemoList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::App.RPC.Service.DemoList.Parser.ParseFrom);

    static readonly Method<global::App.RPC.Service.DemoRequest, global::App.RPC.Model.Response> __Method_Add = new Method<global::App.RPC.Service.DemoRequest, global::App.RPC.Model.Response>(
        MethodType.Unary,
        __ServiceName,
        "Add",
        __Marshaller_DemoRequest,
        __Marshaller_Response);

    static readonly Method<global::App.RPC.Service.DemoId, global::App.RPC.Service.DemoRequest> __Method_GetById = new Method<global::App.RPC.Service.DemoId, global::App.RPC.Service.DemoRequest>(
        MethodType.Unary,
        __ServiceName,
        "GetById",
        __Marshaller_DemoId,
        __Marshaller_DemoRequest);

    static readonly Method<global::App.RPC.Service.Search, global::App.RPC.Service.DemoList> __Method_Get = new Method<global::App.RPC.Service.Search, global::App.RPC.Service.DemoList>(
        MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_Search,
        __Marshaller_DemoList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::App.RPC.Service.RPCDemoServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RPCDemoService</summary>
    public abstract class RPCDemoServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::App.RPC.Model.Response> Add(global::App.RPC.Service.DemoRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::App.RPC.Service.DemoRequest> GetById(global::App.RPC.Service.DemoId request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::App.RPC.Service.DemoList> Get(global::App.RPC.Service.Search request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RPCDemoService</summary>
    public class RPCDemoServiceClient : ClientBase<RPCDemoServiceClient>
    {
      /// <summary>Creates a new client for RPCDemoService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RPCDemoServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RPCDemoService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RPCDemoServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RPCDemoServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RPCDemoServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::App.RPC.Model.Response Add(global::App.RPC.Service.DemoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Add(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::App.RPC.Model.Response Add(global::App.RPC.Service.DemoRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Add, null, options, request);
      }
      public virtual AsyncUnaryCall<global::App.RPC.Model.Response> AddAsync(global::App.RPC.Service.DemoRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::App.RPC.Model.Response> AddAsync(global::App.RPC.Service.DemoRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Add, null, options, request);
      }
      public virtual global::App.RPC.Service.DemoRequest GetById(global::App.RPC.Service.DemoId request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetById(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::App.RPC.Service.DemoRequest GetById(global::App.RPC.Service.DemoId request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetById, null, options, request);
      }
      public virtual AsyncUnaryCall<global::App.RPC.Service.DemoRequest> GetByIdAsync(global::App.RPC.Service.DemoId request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetByIdAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::App.RPC.Service.DemoRequest> GetByIdAsync(global::App.RPC.Service.DemoId request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetById, null, options, request);
      }
      public virtual global::App.RPC.Service.DemoList Get(global::App.RPC.Service.Search request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Get(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::App.RPC.Service.DemoList Get(global::App.RPC.Service.Search request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      public virtual AsyncUnaryCall<global::App.RPC.Service.DemoList> GetAsync(global::App.RPC.Service.Search request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::App.RPC.Service.DemoList> GetAsync(global::App.RPC.Service.Search request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      protected override RPCDemoServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RPCDemoServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(RPCDemoServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Add, serviceImpl.Add)
          .AddMethod(__Method_GetById, serviceImpl.GetById)
          .AddMethod(__Method_Get, serviceImpl.Get).Build();
    }

  }
}
#endregion
